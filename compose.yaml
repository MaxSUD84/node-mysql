services:
    mysql:
        build:
            context: ./mysql
        image: mysql/mysql-server:5.7
        command: --default-authentication-plugin=mysql_native_password
        restart: no
        user: root
        environment:
            - MYSQL_USER=user
            - MYSQL_PASSWORD=user
            - MYSQL_DATABASE=todo
            - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql-password
        secrets:
            - mysql-password
        volumes:
            - /db:/var/lib/mysql
        expose:
            - 9000:9000
        healthcheck:
            test: ["CMD", "mysql> SELECT USER()"]
            interval: 10s
            timeout: 5s
            retries: 5

    adminer:
        image: adminer
        restart: always
        ports:
            - 8090:8080

    web:
        build:
            context: .
            dockerfile: Dockerfile
        # environment:
        #   NODE_ENV: production
        ports:
            - 5173:5173
        # develop:
        #     watch:
        #         - path: ./package.json
        #           action: rebuild
        #         - path: ./package-lock.json
        #           action: rebuild
        #         - path: .
        #           target: ./app
        #           action: sync
        volumes:
            - .:/app
            - /app/node_modules

secrets:
    mysql-password:
        file: ./mysql/mysql-password.txt
# volumes:
#   mysql-data:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

